services:
  # Complete Unified Cross-Channel AI Agents Service
  # Runs ALL servers: Python conversation relay, Node.js API, analytics, and webhooks
  - type: web
    name: cross-channel-ai-complete
    runtime: python3
    buildCommand: |
      # Force Python version and upgrade tools
      echo "Using Python version: $(python --version)"
      python -c "import sys; print(f'Python executable: {sys.executable}')"
      python -c "import sys; print(f'Python version info: {sys.version_info}')"
      
      # Upgrade pip and build tools
      pip install --upgrade pip setuptools wheel
      
      # Install latest compatible dependencies
      pip install -r requirements.txt --no-cache-dir --force-reinstall
      
      # Verify pandas installation specifically
      python -c "import pandas as pd; print(f'✅ Pandas {pd.__version__} installed successfully')"
      
      # Verify other core imports
      python -c "import aiohttp, flask, twilio, openai; print('✅ Core dependencies verified')"
      
      # Test environment configuration
      python -c "from config.environment import get_env_manager; print('✅ Environment setup complete')" || echo "⚠️ Environment config not available, continuing..."
      
      # Install Node.js (use apt for Debian-based Render environment)
      curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
      apt-get install -y nodejs
      echo "Node.js version: $(node --version)"
      echo "NPM version: $(npm --version)"
      
      # Install Conversations API dependencies
      cd Conversations
      echo "Installing Node.js dependencies..."
      npm install --production --no-optional
      echo "Building React frontend..."
      npm run render-postbuild
      echo "Node.js build completed"
      cd ..
      
      # Make startup script executable
      chmod +x start_complete_server.py
      
      # Verify startup script exists
      ls -la start_complete_server.py
      
      echo "✅ Build completed successfully"
    startCommand: python start_complete_server.py
    plan: starter
    env:
      - key: DEPLOYMENT_ENVIRONMENT
        value: render
      - key: PORT
        generateValue: true
      - key: NODE_ENV
        value: production
      - key: RENDER_SERVICE_NAME
        fromService:
          type: web
          name: cross-channel-ai-complete
          property: name
      - key: CLIENT_URL
        fromService:
          type: web
          name: cross-channel-ai-complete
          property: url
      # Twilio Configuration
      - key: TWILIO_ACCOUNT_SID
        sync: false
      - key: TWILIO_AUTH_TOKEN
        sync: false
      - key: TWILIO_INTELLIGENCE_SERVICE_SID
        sync: false
      # OpenAI Configuration
      - key: OPENAI_API_KEY
        sync: false
      # Segment Configuration
      - key: SEGMENT_SPACE_ID
        sync: false
      - key: SEGMENT_ACCESS_SECRET
        sync: false
      # Debug Configuration
      - key: DEBUG_MODE
        value: false
    healthCheckPath: /health

databases:
  - name: conversations-db
    plan: starter
    databaseName: conversations
    user: conversations_user

  - name: analytics-redis
    plan: starter
    type: redis